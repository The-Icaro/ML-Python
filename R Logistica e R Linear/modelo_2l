import numpy as np
import matplotlib.pyplot as plt


#####################
# Modelo Classificação Binária = 2 L, Camadas
# Funcões de At = Relu -> Sig
# Mudar F. At = funcões sigmoid, relu, linhas -> 69,71, 72, 74, 98, 99, 101, 102, 127, 128, 130, 131, 132
# dX = respectiva derivada
# ini = inicializações dos p(W1, b1, W2, b2), alterar 0.01 valores diferentes
# AL = resultado da prop_frente no último layer/camada = A2
# A_ant = resultado da prop_tras para a camada anterior = A1/ (A0, ou derivada de X)
# layers_dims(dimensão dos layers = n_x -> X.shape[0], n_h -> unidades do hl, n_y = unidade de A2) = ex. [12288, 20, 1]
# Hiperparâmetros = l_r -> learning rate, n_it -> n de iterações/treinos, layer_dims
# p_custo -> Se True, printa o custo a X iterações, alterar X linha -> 142
#####################

def sigmoid(Z):
    A = 1 / (1 + np.exp(Z))
    cache = Z
    return A, cache


def relu(Z):
    A = np.max(0, Z)
    assert A.shape == Z.shape
    cache = Z
    return A, cache


def sig_prop_tras(dA, cache):
    Z = cache
    s = 1 / (1 + np.exp(Z))
    dZ = dA * s * (1 - s)
    assert dZ.shape == Z.shape
    return dZ


def relu_prop_tras(dA, cache):
    Z = cache
    dZ = np.array(dA, copy=True)
    dZ[Z <= 0] = 0
    assert dZ.shape == Z.shape
    return dZ


def ini(n_x, n_h, n_y):
    W1 = np.random.randn(n_h, n_x) * 0.01
    b1 = np.zeros((n_h, 1))
    W2 = np.random.randn(n_y, n_h) * 0.01
    b2 = np.zeros((n_y, 1))
    p = {
        'W1': W1,
        'W2': W2,
        'b1': b1,
        'b2': b2
    }
    return p


def linear_frente(A, W, b):
    Z = np.dot(W, A) + b
    cache = (A, W, b)
    return Z, cache


def prop_frente(A, W, b, at: str):
    global cache_linear, at_cache
    if at == 'sigmoid':
        Z, cache_linear = linear_frente(A, W, b)
        A, at_cache = sigmoid(Z)
    elif at == 'relu':
        Z, cache_linear = linear_frente(A, W, b)
        A, at_cache = relu(Z)
    cache = (cache_linear, at_cache)
    return A, cache


def custo_f(AL, Y):  # AL = último A - nesse caso A2
    m = Y.shape[1]
    custo = (-1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))
    custo = np.squeeze(custo)
    return custo


def linear_tras(dZ, cache):
    A_ant, W, b = cache
    m = A_ant.shape[1]
    dW = 1 / m * np.dot(dZ, A_ant.T)
    db = 1 / m * np.sum(dZ, axis=1, keepdims=True)
    dA_ant = np.dot(W.T, dZ)
    return dA_ant, dW, db


def prop_tras(dA, cache, at: str):
    global dA_ant, dW, db
    cache_linear, at_cache = cache
    if at == 'sigmoid':
        dZ = sig_prop_tras(dA, at_cache)
        dA_ant, dW, db = linear_tras(dZ, cache_linear)
    if at == 'relu':
        dZ = relu_prop_tras(dA, at_cache)
        dA_ant, dW, db = linear_tras(dZ, cache_linear)
    return dA_ant, dW, db


def otimizar(par, derivadas, l_r):
    par = par.copy()
    L = len(par) // 2
    for i in range(L):
        par['W' + str(i + 1)] = par['W' + str(i + 1)] - l_r * derivadas['dW' + str(i + 1)]
        par['b' + str(i + 1)] = par['b' + str(i + 1)] - l_r * derivadas['db' + str(i + 1)]
    return par


def modelo(X, Y, layers_dims: list, l_r = 0.05, n_it = 3000, p_custo = False):
    derivadas = {}
    custos = []
    m = X.shape[1]
    n_x, n_h, n_y = layers_dims
    par = ini(n_x, n_h, n_y)
    W1 = par['W1']
    W2 = par['W2']
    b1 = par['b1']
    b2 = par['b2']
    for i in range(0, n_it):
        A1, cache1 = prop_frente(X, W1, b1, 'relu')
        A2, cache2 = prop_frente(A1, W2, b2, 'sigmoid')
        custo = custo_f(A2, Y)
        dA2 = - (np.divide(Y, A2) - np.divide((1 - Y), (1 - A2)))
        dA1, dW2, db2 = prop_tras(dA2, cache2, 'sigmoid')
        dA0, dW1, db1 = prop_tras(dA1, cache1, 'relu')
        derivadas['dW2'] = dW2
        derivadas['dW1'] = dW1
        derivadas['db2'] = db2
        derivadas['db1'] = db1
        par = otimizar(par, derivadas, l_r)
        W1 = par['W1']
        W2 = par['W2']
        b1 = par['b1']
        b2 = par['b2']
        if p_custo and i % 200 == 0:
            print(f'Custo {i} interações = {np.squeeze(custo)}')
        if i % 200 == 0:
            custos.append(custo)
        return par, custos


def plotar_custo(custos, l_r = 0.05):
    plt.plot(np.squeeze(custos))
    plt.ylabel('Custo (p/100)')
    plt.xlabel('N. it')
    plt.title(f'L. Rate = {l_r}')
    plt.show()
